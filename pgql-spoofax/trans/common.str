module common

imports

  signatures/-
  normalized-signatures
  runtime/editor/-
  names/-

rules

  is-literal = is-literal-no-bindVariable
             + ?BindVariable(_)

  is-literal-no-bindVariable = ?Integer(_)
                             + ?Decimal(_)
                             + ?String(_)
                             + ?True() + ?False()
                             + ?Date(_) + ?Time(_) + ?Timestamp(_)

  is-numeric-literal = ?Integer(_) + ?Decimal(_)
  is-boolean-literal = ?True() + ?False()

  is-expression = ?Not(_) + ?And(_, _) + ?Or(_, _) + ?Mul(_, _) + ?Add(_, _) + ?Div(_, _) + ?Mod(_, _) +
        ?Sub(_, _) + ?Eq(_, _) + ?Lt(_, _) + ?Gte(_, _) + ?Lte(_, _) + ?Neq(_, _) + ?Legacy10Regex(_, _)
  is-function = ?Legacy10Id(_) + ?Legacy10Label(_) + ?Legacy10Has(_, _) + ?Legacy10InDegree(_) + ?Legacy10OutDegree(_) + ?Legacy10HasLabel(_, _)

  is-aggregate = ?COUNT(_, _)
               + ?MIN(_, _)
               + ?MAX(_, _)
               + ?SUM(_, _)
               + ?AVG(_, _)
               + ?ARRAY-AGG(_, _)
               + ?LISTAGG(_, _, _)

  is-quantifier = ?BetweenNAndM(_, _)
                + ?ZeroOrMore()
                + ?OneOrMore()
                + ?Optional()
                + ?ExactlyN(_)
                + ?NOrMore(_)
                + ?BetweenZeroAndM(_)

  get-exp-from-aggregation = ?COUNT(_, <id>)
                           + ?MIN(_, <id>)
                           + ?MAX(_, <id>)
                           + ?SUM(_, <id>)
                           + ?AVG(_, <id>)
                           + ?ARRAY-AGG(_, <id>)
                           + ?LISTAGG(_, <id>, _)


  unique-name(|c, origin) = !origin; origin-track-forced(!Identifier(<!origin; origin-track-forced(!(<GENERATED>, "_", <next-counter; write-to-string> c); conc-strings)>, None()))

  GENERATED = !"<<anonymous>>"

  VERTEX_WITHOUT_BRACKETS = !"<<vertex-without-brackets>>"

  make-set-while-preserving-ordering = reverse; make-set; reverse

  is-subquery = ?Subquery(_)

  collect-in-outer-query(s) = collect(is-subquery <+ s); remove-all(is-subquery)

  collect-in-outer-query-outside-aggregation(s) = collect(is-subquery <+ is-aggregate <+ s); remove-all(is-subquery + is-aggregate)

  alltd-in-outer-query(s) = alltd(is-subquery <+ s)

  alltd-in-outer-query-outside-aggregation(s) = alltd(is-subquery <+ is-aggregate <+ s)

  get-aggregations = collect-in-outer-query(is-aggregate)

  to-error-message(|message) = !ErrorMessage(<id>, message)

  // just here to get rid of editor errors in e.g. normalize.str
  origin-track-forced(s) = fail
  origin-text = fail
  origin-offset = fail

  has-at-most-one-binding = ?None() + ?Some(BetweenNAndM(_, "0")) + ?Some(BetweenNAndM(_, "1"))

  is-ddl-statement = is-CreatePropertyGraph + is-DropPropertyGraph + is-CreateExternalSchema + is-DropExternalSchema
  is-CreatePropertyGraph = ?CreatePropertyGraph(_, _, _)
  is-DropPropertyGraph = ?DropPropertyGraph(_)
  is-CreateExternalSchema = ?CreateExternalSchema(_, _, _)
  is-DropExternalSchema = ?DropExternalSchema(_)

  norm-identifier:
    RegularIdentifier(v) -> Identifier(<origin-track-forced(upper-case)> v, v)

  norm-identifier:
    DelimitedIdentifier(v) -> Identifier(v', v')
    with v' := <origin-track-forced(un-double-quote; unescape-delimited-identifier)> v

  unescape-delimited-identifier = string-replace(|"\"\"", "\"")

  norm-string-literal = String(un-single-quote; unescape-string-literal)
  unescape-string-literal = string-replace(|"''", "'")

  to-name-without-case-sensitive-info = origin-track-forced(?Name(None(), Identifier(localName, _)); !Name(None(), localName))
  to-name-without-case-sensitive-info = origin-track-forced(?Name(Some(SchemaName(Identifier(schemaName, _))), Identifier(localName, _)); !Name(schemaName, localName))
