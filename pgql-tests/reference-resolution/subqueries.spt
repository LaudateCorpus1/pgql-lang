module subqueries

language pgql-lang

test Variable reference in NOT EXISTS #1 [[

  SELECT x.prop AS prop
    FROM g MATCH (x) -> ([[y]])
   WHERE NOT EXISTS ( SELECT x.prop AS prop FROM g MATCH (x) -> ([[z]]) WHERE [[z]] <> [[y]] )

]] resolve #3 to #2
   resolve #4 to #1

test Variable reference in NOT EXISTS #2 [[

  SELECT x.salary AS salary
    FROM g MATCH (x)
   WHERE NOT EXISTS ( SELECT x.salary AS salary FROM g MATCH ([[x]]) -> ([[y]]) WHERE [[x]].salary = [[y]].salary )

]] resolve #3 to #1
   resolve #4 to #2

test Reference select key from outer query (1) [[

    SELECT n.age AS [[nAge]]
      FROM g MATCH (n)
   ORDER BY ( SELECT [[nAge]] AS x FROM g MATCH (n) LIMIT 1 )

]] resolve #2 to #1

test Reference select key from outer query (2) [[

    SELECT n.age AS [[nAge]]
      FROM g MATCH (n)
   ORDER BY ( SELECT AVG([[nAge]]) AS avg FROM g MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1

test Reference select key from outer query (3) [[

    SELECT n.age AS [[nAge]]
      FROM g MATCH (n)
  GROUP BY n.age AS nAge
  ORDER BY ( SELECT AVG([[nAge]]) AS avg FROM g MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1

test Reference vertices from both inner and outer query inside aggregation [[

  SELECT id([[a]]) AS id, (SELECT COUNT([[a]].prop + [[b]].prop) AS cnt1 FROM g MATCH ([[b]])) AS cnt2
    FROM g MATCH ([[a]])

]] resolve #1 to #5
   resolve #2 to #5
   resolve #3 to #4

test Reference group key from outer query (1) [[

    SELECT 123 AS x
      FROM g MATCH (n)
    GROUP BY n.age AS [[nAge]]
   ORDER BY ( SELECT AVG([[nAge]]) AS avg FROM g MATCH (n) LIMIT 1 )

]] resolve #2 to #1

test Reference group key from outer query (2) [[

    SELECT 123 AS x
      FROM g MATCH (n)
  GROUP BY n.age AS [[nAge]]
  ORDER BY ( SELECT AVG([[nAge]]) AS avg FROM g MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1

test Resolve to this query before resolving to outer query (1) [[

    SELECT 1 AS n
      FROM g MATCH (n)
  ORDER BY ( SELECT 1 AS c1 MATCH ( [[n]] ) WHERE [[n]].age >= 21 )

]] resolve #2 to #1

test Resolve to this query before resolving to outer query (2) [[

    SELECT 1 AS n
      FROM g MATCH ( [[n]] )
  ORDER BY [[n]].prop, ( SELECT 1 AS c1 MATCH (m) WHERE [[n]].age >= 21 )

]] resolve #2 to #1
   resolve #3 to #1

test Resolve to this query before resolving to outer query (3) [[

    SELECT 1 AS c2
      FROM g MATCH ( [[n]] )
  ORDER BY ( SELECT 1 AS c1 MATCH (m) WHERE [[n]].age >= 21 )

]] resolve #2 to #1

test Resolve to this query before resolving to outer query (4) [[

    SELECT n.age AS c2
      FROM g MATCH (n)
  GROUP BY n.age AS c3
  ORDER BY ( SELECT n.age AS c1 MATCH ( [[n]] ) WHERE [[n]].age >= 21 )

]] resolve #2 to #1

test Resolve to this query before resolving to outer query (5) [[

    SELECT n.age AS c2
      FROM g MATCH (n)
  GROUP BY n.age AS c3
    HAVING ( SELECT n.age AS c1 MATCH ( [[n]] ) WHERE [[n]].age >= 21 )

]] resolve #2 to #1

test Resolve to this query before resolving to outer query (6) [[

    SELECT AVG(n.age) AS c2
      FROM g MATCH (n)
    HAVING ( SELECT n.age AS c1 MATCH ( [[n]] ) WHERE [[n]].age >= 21 )

]] resolve #2 to #1

test Resolve to this query before resolving to outer query (7) [[

    SELECT s.fname AS fname, [[s]].age AS age
      FROM g MATCH ( [[s]] )
  ORDER BY ( SELECT [[s]].age AS age FROM g MATCH ( [[s]] ) ) ASC, id([[s]]) ASC

]] resolve #1 to #2
   resolve #3 to #4
   resolve #5 to #2